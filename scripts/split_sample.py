#!/usr/bin/env python
# author: enzedeng
import os
import argparse
import collections
import gzip
import pandas as pd
import pysam
import scipy

def load_vcf(vcf_fn):
    snp_dict = dict()
    with pysam.VariantFile(vcf_fn) as f:
        for record in f.fetch():
            # print(record.chrom, record.pos, record.ref, record.alts)
            # only snp
            snp_dict[(record.chrom, record.pos - 1)] = (record.ref, record.alts[0])
    return snp_dict

def load_barcode(bc_fn):
    barcode_set = set()
    if bc_fn.endswith('.gz'):
        opener = gzip.open
    else:
        opener = open
    with opener(bc_fn, 'rt') as f:
        for line in f:
            barcode_set.add(line.strip())
    return barcode_set

def main():
    parser = argparse.ArgumentParser(description='Classify barcode by sample SNP vcf.')
    parser.add_argument('--outpre', required=True, help='Output prefix of data.')
    parser.add_argument('--bam', required=True, help='Bam file with BR and CR tag.')
    parser.add_argument('--barcode', required=True, help='Barcode file generated by cellranger.')
    parser.add_argument('--pvalue', default=0.05, type=float, help='Threshold of p-value to classify barcode.')
    parser.add_argument('vcfs', nargs=2, help='Vcf file with passed SNP.')
    args = parser.parse_args()

    snp_vcf1, snp_vcf2 = args.vcfs
    sample1 = os.path.basename(snp_vcf1).split('.')[0]
    sample2 = os.path.basename(snp_vcf2).split('.')[0]
    sample1_vcf = load_vcf(snp_vcf1)
    sample2_vcf = load_vcf(snp_vcf2)

    barcode_set = load_barcode(args.barcode)
    barcode_num_dict = collections.defaultdict(lambda: [0, 0])
    # first loop in chrom 1 to classify barcode.
    with pysam.AlignmentFile(args.bam, "rb") as f:
        for read in f.fetch():
            extra_flag = read.get_tag('xf')
            if extra_flag != 25:
                continue
            barcode = read.get_tag('CB')
            if barcode not in barcode_set:
                continue
            ref_name = read.reference_name
            sample1_num = 0
            sample2_num = 0
            for read_pos, ref_pos in read.get_aligned_pairs(matches_only=True):
                if (ref_name, ref_pos) in sample1_vcf:
                    if read.query_sequence[read_pos] == sample1_vcf[ref_name, ref_pos][1]:
                        sample1_num += 1
                    else:
                        sample2_num += 1
                if (ref_name, ref_pos) in sample2_vcf:
                    if read.query_sequence[read_pos] == sample2_vcf[ref_name, ref_pos][1]:
                        sample2_num += 1
                    else:
                        sample1_num += 1
            if sample1_num > sample2_num:
                barcode_num_dict[barcode][0] += 1
            elif sample2_num > sample1_num:
                barcode_num_dict[barcode][1] += 1
    barcode_data = []
    for barcode, (s1, s2) in barcode_num_dict.items():
        chisq, pvalue = scipy.stats.chisquare((s1, s2))
        barcode_data.append((barcode, s1, s2, chisq, pvalue))
    df = pd.DataFrame(barcode_data)
    df.columns = ['barcode', 'sample1 SNP num', 'sample2 SNP num', 'chi-squared test statistic', 'pvalue']
    df.to_csv(f'{args.outpre}barcode.txt', sep='\t', index=False)
    df = df[df['pvalue'] < args.pvalue]
    s1_bc = set(df[df['sample1 SNP num'] > df['sample2 SNP num']]['barcode'])
    s2_bc = set(df[df['sample2 SNP num'] > df['sample1 SNP num']]['barcode'])

    barcode_gene_umi = collections.defaultdict(lambda: collections.defaultdict(set))
    gene_id_to_name = dict()
    # second loop to generate matrix and split bam.
    with pysam.AlignmentFile(args.bam, "rb") as f, pysam.AlignmentFile(f'{args.outpre}{sample1}.bam', "wb", header=f.header) as s1, pysam.AlignmentFile(f'{args.outpre}{sample2}.bam', "wb", header=f.header) as s2, pysam.AlignmentFile(f'{args.outpre}other.bam', "wb", header=f.header) as fo:
        for read in f.fetch():
            extra_flag = read.get_tag('xf')
            if extra_flag != 25:
                continue
            barcode = read.get_tag('CB')
            if barcode not in barcode_set:
                continue
            gene_name = read.get_tag('GN')
            gene_id = read.get_tag('GX')
            umi = read.get_tag('UB')
            barcode_gene_umi[barcode][gene_id].add(umi)
            gene_id_to_name[gene_id] = gene_name
            if barcode in s1_bc:
                s1.write(read)
            elif barcode in s2_bc:
                s2.write(read)
            else:
                fo.write(read)
    pysam.index(f'{args.outpre}{sample1}.bam')
    pysam.index(f'{args.outpre}{sample2}.bam')
    pysam.index(f'{args.outpre}other.bam')
    line_num_s1 = sum([len(barcode_gene_umi[x]) for x in s1_bc])
    line_num_s2 = sum([len(barcode_gene_umi[x]) for x in s2_bc])
    line_num_so = sum([len(barcode_gene_umi[x]) for x in barcode_gene_umi if x not in s1_bc and x not in s2_bc])
    gene_list_s1 = set(e for s in [y.keys() for x, y in barcode_gene_umi.items() if x in s1_bc] for e in s)
    gene_list_s2 = set(e for s in [y.keys() for x, y in barcode_gene_umi.items() if x in s2_bc] for e in s)
    gene_list_so = set(e for s in [y.keys() for x, y in barcode_gene_umi.items() if x not in s1_bc and x not in s2_bc] for e in s)
    s1_barcode_to_idx, s2_barcode_to_idx, so_barcode_to_idx = {}, {}, {}
    s1_gene_to_idx, s2_gene_to_idx, so_gene_to_idx = {}, {}, {}
    with gzip.open(f'{args.outpre}{sample1}_barcodes.tsv.gz', 'wt') as f:
        idx = 0
        for bc in s1_bc:
            idx += 1
            s1_barcode_to_idx[bc] = idx
            f.write(f'{bc}\n')
    with gzip.open(f'{args.outpre}{sample2}_barcodes.tsv.gz', 'wt') as f:
        idx = 0
        for bc in s2_bc:
            idx += 1
            s2_barcode_to_idx[bc] = idx
            f.write(f'{bc}\n')
    with gzip.open(f'{args.outpre}other_barcodes.tsv.gz', 'wt') as f:
        idx = 0
        for bc in barcode_gene_umi:
            if bc in s1_bc or bc in s2_bc:
                continue
            idx += 1
            so_barcode_to_idx[bc] = idx
            f.write(f'{bc}\n')
    with gzip.open(f'{args.outpre}{sample1}_features.tsv.gz', 'wt') as f:
        idx = 0
        for gene in gene_list_s1:
            idx += 1
            s1_gene_to_idx[gene] = idx
            f.write(f'{gene}\t{gene_id_to_name[gene]}\tGene Expression\n')
    with gzip.open(f'{args.outpre}{sample2}_features.tsv.gz', 'wt') as f:
        idx = 0
        for gene in gene_list_s2:
            idx += 1
            s2_gene_to_idx[gene] = idx
            f.write(f'{gene}\t{gene_id_to_name[gene]}\tGene Expression\n')
    with gzip.open(f'{args.outpre}other_features.tsv.gz', 'wt') as f:
        idx = 0
        for gene in gene_list_so:
            idx += 1
            so_gene_to_idx[gene] = idx
            f.write(f'{gene}\t{gene_id_to_name[gene]}\tGene Expression\n')
    with gzip.open(f'{args.outpre}{sample1}_matrix.mtx.gz', 'wt') as f:
        f.write('%%MatrixMarket matrix coordinate integer general\n')
        f.write('%metadata_json: {"software_version": "cellranger-7.0.1", "format_version": 2}\n')
        f.write(f'{len(s1_gene_to_idx)} {len(s1_barcode_to_idx)} {line_num_s1}\n')
        for bc in s1_bc:
            for gene in barcode_gene_umi[bc]:
                f.write(f'{s1_gene_to_idx[gene]}\t{s1_barcode_to_idx[bc]}\t{len(barcode_gene_umi[bc][gene])}\n')
    with gzip.open(f'{args.outpre}{sample2}_matrix.mtx.gz', 'wt') as f:
        f.write('%%MatrixMarket matrix coordinate integer general\n')
        f.write('%metadata_json: {"software_version": "cellranger-7.0.1", "format_version": 2}\n')
        f.write(f'{len(s2_gene_to_idx)} {len(s2_barcode_to_idx)} {line_num_s2}\n')
        for bc in s2_bc:
            for gene in barcode_gene_umi[bc]:
                f.write(f'{s2_gene_to_idx[gene]}\t{s2_barcode_to_idx[bc]}\t{len(barcode_gene_umi[bc][gene])}\n')
    with gzip.open(f'{args.outpre}other_matrix.mtx.gz', 'wt') as f:
        f.write('%%MatrixMarket matrix coordinate integer general\n')
        f.write('%metadata_json: {"software_version": "cellranger-7.0.1", "format_version": 2}\n')
        f.write(f'{len(so_gene_to_idx)} {len(so_barcode_to_idx)} {line_num_so}\n')
        for bc in barcode_set:
            if bc in s1_bc or bc in s2_bc:
                continue
            for gene in barcode_gene_umi[bc]:
                f.write(f'{so_gene_to_idx[gene]}\t{so_barcode_to_idx[bc]}\t{len(barcode_gene_umi[bc][gene])}\n')

if __name__ == '__main__':
    main()
